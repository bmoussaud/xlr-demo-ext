import sys, string, time, urllib
from com.xebialabs.xlrelease.plugin.webhook import JsonPathResult



"""
Calls Jenkins API in order to know if a job expect parameters
When expecting a parameter named "param", the JSON looks like:

    "actions" : [
        {
            "parameterDefinitions" : [
                {
                    "defaultParameterValue" : {
                        "name" : "param",
                        "value" : ""
                    },
                    "description" : "",
                    "name" : "param",
                    "type" : "StringParameterDefinition"
                }
            ]
        }
    ]
"""
def isJobParameterized(request, jobContext):
    jobInfo = request.get(jobContext + 'api/json', contentType = 'application/json')
    jobActions = JsonPathResult(jobInfo.response, 'actions').get()

    if jobActions is not None:
        for action in jobActions:
            if (action is not None and 'parameterDefinitions' in action):
                return True

    return False

"""
With an input that looks like:
param1=value 1\n
param2=value 2\n

Produces: ?param1=value%201&param2=value%202 to be used as a query string
"""
def buildQueryString(params):
    if (params is not None):
        queryParams = []
        for param in params.splitlines():
            if param:
                tokens = param.split('=')
                queryParams.append(tokens[0] + "=" + urllib.quote(tokens[1]))
        return "?" + "&".join(queryParams)
    else:
        return ""





poll_interval = 5

if jenkinsServer is None:
    print "No server provided."
    sys.exit(1)

jenkinsURL = jenkinsServer['url']

jobUrl = jenkinsURL
jobContext = '/job/' + urllib.quote(jobName) + '/'

request = HttpRequest(jenkinsServer, username, password)


if isJobParameterized(request, jobContext):
    buildContext = jobContext + 'buildWithParameters' + buildQueryString(jobParameters)
else:
    buildContext = jobContext + 'build'

buildUrl = jobUrl + buildContext

buildResponse = request.post(buildContext, '', contentType = 'application/json')

if buildResponse.isSuccessful():
    # polls until the job has been actually triggered (it could have been queued)
    while True:
        time.sleep(poll_interval)
        response = request.get(jobContext + 'api/json', contentType = 'application/json')

        # response.inQueue is a boolean set to True if a job has been queued
        inQueue = JsonPathResult(response.response, 'inQueue').get()

        if not inQueue:
            buildNumber = JsonPathResult(response.response, 'lastBuild.number').get()
            break

    # polls until the job completes
    while True:
        time.sleep(poll_interval)
        response = request.get(jobContext + str(buildNumber) + '/api/json', contentType = 'application/json')
        buildStatus = JsonPathResult(response.response, 'result').get()
        duration = JsonPathResult(response.response, 'duration').get()
        if buildStatus and duration != 0:
            break

    print "Job '%s' #%s" % (jobName, buildNumber)
    print "Finished: %s" % buildStatus
    print "Console Output: %s%s%s/console" % (jobUrl,jobContext,buildNumber)
    consoleOut = request.get(jobContext + str(buildNumber) + '/consoleText')
    print consoleOut.response
    if buildStatus == 'SUCCESS':
        sys.exit(0)
    else:
        sys.exit(1)
else:
    print "Failed to connect at %s." % buildUrl
    buildResponse.errorDump()
    sys.exit(1)
